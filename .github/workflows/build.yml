name: Build Wheels
on:
  push:
  workflow_dispatch:
  pull_request:
    branches:
      - master

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        name: [manylinux-x64, manylinux-arm64, windows-x64, macos-arm64]
        include:
          - before-build: ""
            container: null
            repair: ""
            activate: "source .venv/bin/activate"
            replace-name: ""
            pick-wheel: "$(ls ../plugin-htmlkit/wheelhouse/*.whl | head -n1)"
          - name: manylinux-x64
            os: ubuntu-latest
            container:
              image: quay.io/pypa/manylinux_2_34_x86_64
            repair: "auditwheel repair dist/*.whl -w wheelhouse"
            replace-name: "sed -i -e 's/name = \"nonebot-plugin-htmlkit\"/name = \"test-env\"/' pyproject.toml"
          - name: manylinux-arm64
            os: ubuntu-24.04-arm
            container:
              image: quay.io/pypa/manylinux_2_34_aarch64
            repair: "auditwheel repair dist/*.whl -w wheelhouse"
            replace-name: "sed -i -e 's/name = \"nonebot-plugin-htmlkit\"/name = \"test-env\"/' pyproject.toml"
          - name: windows-x64
            os: windows-2025
            activate: ".venv/Scripts/activate"
            before-build: "cp .venv/Scripts/python.exe .venv/Scripts/python3.exe" # workaround xmake check for python3 executable
            replace-name: (Get-Content pyproject.toml) -replace 'name = "nonebot-plugin-htmlkit"', 'name = "test-env"' | Set-Content pyproject.toml
            repair: "delvewheel repair -w wheelhouse dist/*.whl"
            pick-wheel: "(Get-ChildItem ..\\plugin-htmlkit\\wheelhouse\\*.whl | Select-Object -First 1).FullName"
          - name: macos-arm64
            os: macos-latest
            repair: "delocate-wheel -w wheelhouse dist/*.whl"
            replace-name: "sed -i '' -e 's/name = \"nonebot-plugin-htmlkit\"/name = \"test-env\"/' pyproject.toml"
    env:
      XMAKE_ROOT: 'y'
      MACOSX_DEPLOYMENT_TARGET: '11.0'
      XMAKE_CONFIG_MODE: release

    name: Build on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Install UV
        uses: astral-sh/setup-uv@v6
      - name: Install XMake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest
          package-cache: true
          package-cache-key: packages-${{ matrix.os }}-${{ hashFiles('xmake.lua', 'litehtml/**', '!litehtml/CMakeLists.txt') }}
          project-path: .
          actions-cache-folder: '.xmake-cache'
          actions-cache-key: xmake-${{ matrix.os }}-${{ hashFiles('xmake.lua') }}
      - name: Pin Python Version
        run: uv python pin 3.10.11
      - name: Build wheels
        run: |
          git config --global --add safe.directory '*'
          uv venv
          ${{ matrix.before-build }}
          ${{ matrix.activate }}
          uv sync --only-group build --no-install-workspace
          uv build
          ${{ matrix.repair }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl
      - name: Build Unstripped Binaries
        run: |
          git config --global --add safe.directory '*'
          ${{ matrix.activate }}
          xmake config -m releasedbg -y
          xmake build -vD core
          xmake install -o bindist
      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: bindist/*
      - name: Run Test
        run: |
          cd ../
          mkdir test-env
          cd test-env
          uv python pin 3.13
          uv venv
          ${{ matrix.activate }}
          cp -r ../plugin-htmlkit/tests/ ./tests
          cp ../plugin-htmlkit/pyproject.toml ./pyproject.toml
          ${{ matrix.replace-name }}
          uv sync --group test --no-install-workspace
          uv add ${{ matrix.pick-wheel }} --no-install-workspace
          uv run pytest --output-img-dir ../plugin-htmlkit/tests_output
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: tests_output

  sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Install UV
        uses: astral-sh/setup-uv@v6
      - name: Pin Python Version
        run: uv python pin 3.10.11
      - name: Build sdist
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --only-group build --no-install-workspace
          uv build --sdist
          mkdir sdist-out
          cp dist/*.tar.gz sdist-out/
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: sdist-out/*

  package:
    name: Package + Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, sdist]
    permissions:
      id-token: write  # required for OIDC trusted publisher
      contents: read
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
      - name: Install UV
        uses: astral-sh/setup-uv@v6
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          uv publish --trusted-publishing always